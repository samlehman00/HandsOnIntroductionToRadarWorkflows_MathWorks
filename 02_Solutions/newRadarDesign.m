% Generated by MATLAB(R) 24.1 (R2024a) and Radar Toolbox 24.1 (R2024a).
% Generated on: 31-Mar-2024 20:23:04

%% Set up radar, target, and environment structs for the currently selected radar
% Radar design parameters
radar = designRadar('Exercise3RadarPulseInt');

% Radar environment
env = radarEnvironment();

% Radar target
rangeLimits = [1.00000e-02 5.00000e+04]; % m
numTargetPositions = 1000;
target = radarTarget(radar,env,rangeLimits,numTargetPositions);

%% Define constraints and design requirements
% Constrain analysis in range
constraint.Range = 4.0000e+04; % m

% Set design requirements
PdThreshold = 7.5000e-01; % Decimal
PdObjective = 9.0000e-01; % Decimal
% Calculate propagation factor
Fprop = propagationFactor(radar,target);

% Calculate environmental losses
[Lgas,Llens,Lprecipitation] = atmosphericLosses(target);
Latmos = sum([Lgas Llens Lprecipitation], 2);

% Calculate range-dependent factors
Fcustom = rangeDependentLosses();


%% Compute available SNR for the currently selected radar
% Calculate signal-to-noise ratio (SNR)
availableSNR = radareqsnr(radar.Wavelength,target.ranges,radar.PeakPower, ...
    radar.Pulsewidth,'Gain',radar.Gain,'RCS',target.RCS,'Ts',radar.SystemTemperature, ...
    'PropagationFactor',Fprop,'AtmosphericLoss',Latmos,'CustomFactor',Fcustom); % dB

%% Calculate detectability
requiredPd = [PdThreshold PdObjective]; % Decimal
[Dx,Dc,componentNames] = effectiveDetectability(requiredPd,radar);

% Probability of detection as a function of target range
probabilityGrid = probgrid(0.1,1-1e-6,100);
requiredSNR = effectiveDetectability(probabilityGrid,radar);
[~, idx] = unique(requiredSNR);
idxNotInf = ~isinf(availableSNR);
availablePd = zeros(size(availableSNR));
if any(idxNotInf)
    availablePd(idxNotInf) = rocinterp(requiredSNR(idx),probabilityGrid(idx),availableSNR(idxNotInf),'snr-pd');
end
availablePd(availableSNR > requiredSNR(end)) = 1;
availablePd(availableSNR < requiredSNR(1)) = 0;


%% Generate signal-to-noise (SNR) ratio versus range plot
figure('Name','SNR vs Range');
hAxes = gca;
detect = Dx(2); % dB
detectThreshold = Dx(1); % dB
maxRange = constraint.Range;
radarmetricplot(target.ranges*1.0000e-03,availableSNR,detect,detectThreshold, ...
    'MaxRangeRequirement',maxRange*1.0000e-03, ...
    'RadarName',{radar.Name}, ...
    'MetricName','SNR', ...
    'RequirementName','Detectability', ...
    'RangeUnit','km', ...
    'MetricUnit','dB', ...
    'ShowStoplight',true, ...
    'Parent',hAxes);


%% Generate probability of detection versus range plot
figure('Name','Pd vs Range');
hAxes = gca;
maxRange = constraint.Range;
radarmetricplot(target.ranges*1.0000e-03,availablePd,PdObjective,PdThreshold, ...
    'MaxRangeRequirement',maxRange*1.0000e-03, ...
    'RadarName',{radar.Name}, ...
    'MetricName','Probability of Detection', ...
    'RequirementName','Pd', ...
    'RangeUnit','km', ...
    'ShowStoplight',true, ...
    'Parent',hAxes);
ylim(hAxes,[0.1 1.04]);


%% Generate link budget plot
figure('Name','Link Budget');
subplot(2,1,1);
radarbudgetplot(Dc(2,:), componentNames);
title(['Objective Detectability ' sprintf('(P_d=%.2f)', PdObjective)]);

subplot(2,1,2);
radarbudgetplot(Dc(1,:), componentNames);
title(['Threshold Detectability ' sprintf('(P_d=%.2f)', PdThreshold)]);


%% Generate environmental losses plot
Fprop = sum(Fprop,2);
figure('Name','Environmental Losses');
ax = subplot(4, 1, 1);
plot(target.ranges*1.0000e-03,Fprop,'LineWidth',2,'Tag','Lossfactor_1');
title('Radar Propagation Factor');
ylabel('(dB)');
grid on;
setYLims(ax,Fprop);

ax = subplot(4, 1, 2);
plot(target.ranges*1.0000e-03,Lprecipitation,'LineWidth',2,'Tag','Lossfactor_1');
title('Precipitation Loss');
ylabel('(dB)');
grid on;
setYLims(ax,Lprecipitation);

ax = subplot(4, 1, 3);
plot(target.ranges*1.0000e-03,Llens,'LineWidth',2,'Tag','Lossfactor_1');
title('Lens Effect Loss');
ylabel('(dB)');
grid on;
setYLims(ax,Llens);

ax = subplot(4, 1, 4);
plot(target.ranges*1.0000e-03,Lgas,'LineWidth',2,'Tag','Lossfactor_1');
title('Atmospheric Gas Loss');
ylabel('(dB)');
grid on;
setYLims(ax,Lgas);

xlabel('Target Range (km)');

%% Local Functions
% Radar design parameters
function radar = designRadar(radarName)
radar.Name = radarName;
radar.AzimuthBeamwidth = [3.0326;3.0326];
radar.CFARMethod = 'CA';
radar.CFARNumCells = 20;
radar.ElevationBeamwidth = [3.0326;3.0326];
radar.Frequency = 6000000000; % Hz
radar.Gain = [35.4691,35.4691];
radar.Height = 100; % m
radar.NoiseTemperature = 290;
radar.NumCPIs = 1;
radar.NumCoherentPulses = 1;
radar.NumNonCoherentPulses = 10;
radar.PRF = 500; % Hz
radar.PeakPower = 1000; % W
radar.Pfa = 1.00000e-06;
radar.Polarization = 'H';
radar.Pulsewidth = 1.00000e-06; % s
radar.TiltAngle = 5.00000e-01; % deg

% Convert frequency to wavelength
radar.Wavelength = freq2wavelen(radar.Frequency); % m

% Calculate system noise
radar.SystemTemperature = radar.NoiseTemperature; % Kelvin
end

%%
% Radar environment
function env = radarEnvironment()
env.EarthModel = 'Flat';
env.EffectiveEarthRadius = Inf; % m
env.RefractionExponent = 0;
env.RefractiveIndex = 1;
env.SurfaceHeightStandardDeviation = 0; % m
env.SurfaceRefractivity = 0;
end

%%
% Radar target
function target = radarTarget(radar,env,rangeLimits,numTargetPositions)
target.ElevationAngle = 5.00000e-01;
target.RCS = 10; % mÂ²
target.SwerlingCase = 'Swerling0';

% Calculate target position ranges
target.ranges = linspace(rangeLimits(1),rangeLimits(2),numTargetPositions).'; % m
target.validRngIdxs = getValidRangeIdxs(radar,target,env);

% Calculate target height
target.Height = el2height(target.ElevationAngle,radar.Height,target.ranges, ...
    env.EarthModel,env.EffectiveEarthRadius); % m
end

%%
% Calculate propagation factor
function Fprop = propagationFactor(radar,target)
freqRange = [0.95*radar.Frequency 1.05*radar.Frequency];
patternAnglesEl = linspace(-90,90,361);
hTxRx = phased.SincAntennaElement('FrequencyRange',freqRange, ...
    'Beamwidth',[radar.AzimuthBeamwidth(1) radar.ElevationBeamwidth(1)]);
patternTxRxdB = pattern(hTxRx,radar.Frequency,0,patternAnglesEl,'Type','powerdb');
idxs = target.validRngIdxs;
elevationAngles = target.ElevationAngle*ones(size(idxs));
thetaDiff = mod(((elevationAngles - radar.TiltAngle) + 90),180) - 90;
apatternTxRx2 = interp1(patternAnglesEl,patternTxRxdB,thetaDiff).';
apatternTxRx1 = interp1(patternAnglesEl,patternTxRxdB,0).';
Fpattern = -Inf(numel(target.ranges),2);
Fpattern(idxs,:) = (apatternTxRx2.' - apatternTxRx1)*ones(1,2);
Fprop = Fpattern; % dB
end

%%
% Calculate environmental losses
function [Lgas,Llens,Lprecipitation] = atmosphericLosses(target)
% Calculate atmospheric gas loss
Lgas = zeros(numel(target.ranges),1);
% Calculate lens effect loss
Llens = zeros(numel(target.ranges),1);
% Calculate precipitation loss
Lprecipitation = zeros(numel(target.ranges),1);
end

%%
% Calculate range-dependent factors
function Fcustom = rangeDependentLosses()
Fcustom = 0; % dB
end


%%
% Get indices of geometrically valid ranges
function idxs = getValidRangeIdxs(radar,target,env)
anht = radar.Height + 2*env.SurfaceHeightStandardDeviation;
tgtht = inf;
minRng = 0;
maxRng = 2*env.EffectiveEarthRadius + tgtht + anht;
idxs = (target.ranges >= minRng & target.ranges <= maxRng);
end

%%
% Effective detectability factor for the selected radar
function [Dx,Dc,componentNames] = effectiveDetectability(Pd,radar)
Pfa = radar.Pfa;
[Dc,componentNames] = detectabilityComponents(Pd,Pfa,radar.NumNonCoherentPulses,radar);
Dx = sum(Dc,2);
end

%%
% Losses and gains included in the detectability factor
function [Dc,names] = detectabilityComponents(Pd,Pfa,N,radar)
% Single-pulse steady target
D01 = detectability(Pd,Pfa,1,'Swerling0');
% Noncoherent integration gain
D0N = detectability(Pd,Pfa,N);
Gni = D0N - D01;
% CFAR loss
Lcfar = cfarloss(Pfa,radar.CFARNumCells,'Method',radar.CFARMethod);
Lcfar = Lcfar*ones(numel(Pd),1);

Dc = [D01 Gni Lcfar];
names = {'Single-pulse steady target' 'Noncoherent integration gain' 'CFAR loss'};
end

%%
% Set limits of the y axis for environmental losses plots
function setYLims(ax,x)
idx = isfinite(x);
minx = min(x(idx), [], 'all');
if isempty(minx)
    minx = 0;
end
maxx = max(x(idx), [], 'all');
if isempty(maxx)
    maxx = 0;
end
d = max((maxx - minx)/10, 0.1);
ylim(ax, [minx - d maxx + d]);
end
